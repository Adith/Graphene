{"name":"Graphene","tagline":"One Social Networking Graph Language to rule them all.","body":"![Graphene Logo](https://raw.githubusercontent.com/Adith/Graphene/master/Assets/graph-logo.png)\r\n\r\n#Graphene\r\n###### social network graph language compiler         \r\n             \r\n\r\n\r\nGraphene makes graph manipulation and social network data analysis convenient using a purpose-built interpreted programming language.\r\nThe motivation for our language is the massive commonplace use of graphs and graph based data mining algorithms in today's\r\nsoftware world. At the same time, we see a large bubble of social network and social network-like applications which \r\nmanage a large backend of data which can usually be represented using a graph structure.\r\n\r\nMost of today's languages do not provide out-of-the-box or easy to use features for graph initialization, operations\r\nand management. Graphene will provide this interface to be able to support generic graph algorithms as well as specific\r\nsocial network applications based computations on graph-like data structures.\r\n\r\nUsage: `./graphene (test [-t <number>| -i] | -f <file_path> | -h | -d)`\r\n\r\n    Options:\r\n      test                  Run regression tests to test the compiler's sanity\r\n          -t                Specify Tests to run\r\n          -i                Run tests in isolated mode\r\n      -f                    Interpret source from file on disk\r\n      -h                    Show help message and exit\r\n      -d                    See under the hood. Use with caution!\r\n\r\n\r\n            \r\n## Examples\r\n`./graphene test`\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run all built-in tests\r\n\r\n`./graphene test -t 1`\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run only designated tests against the compiler, in the example, only Test #1.\r\n\r\n`./graphene test -i`\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run all built-in tests, but in isolated mode. The effects of commands in one test do not persist when the next test starts.\r\n\r\n`./graphene -f samples/graph.ene`\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Interpret source from a file on disk. File path is from CWD.\r\n\r\n            \r\n## Look and Feel\r\n####Standard graph view with profile card:       \r\n######from `output();`\r\n\r\nSample data set shown here, courtesy [Stanford University](snap.stanford.edu/data/egonets-Facebook.html).   \r\nProfile attributes generated at [pseudo-random](randomuser.me).\r\n\r\n![Standard View with Profile Card](https://raw.githubusercontent.com/Adith/Graphene/master/Assets/Profile_Card.png)       \r\n\r\n\r\n####Mesh creation and output: \r\nfrom `person has name,city, picture; output(mesh(20, “person”));`\r\n\r\n![Mesh](https://raw.githubusercontent.com/Adith/Graphene/master/Assets/Mesh.png)        \r\n\r\n####Graph View with overlaid nodes. Highlighted nodes represent a Global Reach. \r\nfrom `output().overlay(graph.GlobalReach());`\r\n\r\n![Overlay](https://raw.githubusercontent.com/Adith/Graphene/master/Assets/Overlay.png)         \r\n\r\n####Graphical Interface i/p & o/p besides console support, to make things more interesting! \r\nfrom `input();`\r\n\r\n![Input](https://raw.githubusercontent.com/Adith/Graphene/master/Assets/input.png)          \r\n\r\n\r\nTo get started, read [this](https://github.com/Adith/Graphene/raw/master/Assets/Final%20Report/Graphene_Final_Presentation.pdf).         \r\n\r\n             \r\n\r\n######Silent graph analyst by day, vigilante graph ninja by night [-_-]~","google":"UA-50924006-1","note":"Don't delete this file! It's used internally to help with page regeneration."}